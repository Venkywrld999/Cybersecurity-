import sqlite3
from cryptography.fernet import Fernet

# Function to generate encryption key
def generate_key():
    return Fernet.generate_key()

# Function to encrypt plaintext using the key
def encrypt_message(message, key):
    fernet = Fernet(key)
    encrypted_message = fernet.encrypt(message.encode())
    return encrypted_message

# Function to decrypt ciphertext using the key
def decrypt_message(encrypted_message, key):
    fernet = Fernet(key)
    decrypted_message = fernet.decrypt(encrypted_message).decode()
    return decrypted_message

# Function to save encrypted message and key in the database
def save_to_database(encrypted_message, key):
    conn = sqlite3.connect('encrypted_messages.db')
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS messages (id INTEGER PRIMARY KEY, encrypted_message TEXT, decryption_key TEXT)")
    c.execute("INSERT INTO messages (encrypted_message, decryption_key) VALUES (?, ?)", (encrypted_message, key.decode()))
    conn.commit()
    conn.close()

# Function to retrieve encrypted message and key from the database
def retrieve_from_database():
    conn = sqlite3.connect('encrypted_messages.db')
    c = conn.cursor()
    c.execute("SELECT encrypted_message, decryption_key FROM messages ORDER BY id DESC LIMIT 1")
    result = c.fetchone()
    conn.close()
    return result

def main():
    # Generate encryption key
    key = generate_key()
    print("Encryption key:", key.decode())

    # Get input from user
    plaintext = input("Enter the plaintext to encrypt: ")

    # Encrypt the plaintext
    encrypted_text = encrypt_message(plaintext, key)

    # Save encrypted message and key in the database
    save_to_database(encrypted_text, key)

    # Retrieve encrypted message and key from the database
    encrypted_message, decryption_key = retrieve_from_database()

    print("Encrypted message:", encrypted_message)
    print("Decryption key:", decryption_key)

if __name__ == "__main__":
    main()
